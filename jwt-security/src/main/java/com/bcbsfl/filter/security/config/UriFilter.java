package com.bcbsfl.filter.security.config;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class UriFilter implements Bean, Serializable {

    @PropertyDefinition
    String uri;
    
    @PropertyDefinition
    List<String> roles;
    
    @PropertyDefinition
    Boolean secured;
    
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code UriFilter}.
     * @return the meta-bean, not null
     */
    public static UriFilter.Meta meta() {
        return UriFilter.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(UriFilter.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    @Override
    public UriFilter.Meta metaBean() {
        return UriFilter.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the uri.
     * @return the value of the property
     */
    public String getUri() {
        return uri;
    }

    /**
     * Sets the uri.
     * @param uri  the new value of the property
     */
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Gets the the {@code uri} property.
     * @return the property, not null
     */
    public final Property<String> uri() {
        return metaBean().uri().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the roles.
     * @return the value of the property
     */
    public List<String> getRoles() {
        return roles;
    }

    /**
     * Sets the roles.
     * @param roles  the new value of the property
     */
    public void setRoles(List<String> roles) {
        this.roles = roles;
    }

    /**
     * Gets the the {@code roles} property.
     * @return the property, not null
     */
    public final Property<List<String>> roles() {
        return metaBean().roles().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the secured.
     * @return the value of the property
     */
    public Boolean getSecured() {
        return secured;
    }

    /**
     * Sets the secured.
     * @param secured  the new value of the property
     */
    public void setSecured(Boolean secured) {
        this.secured = secured;
    }

    /**
     * Gets the the {@code secured} property.
     * @return the property, not null
     */
    public final Property<Boolean> secured() {
        return metaBean().secured().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public UriFilter clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            UriFilter other = (UriFilter) obj;
            return JodaBeanUtils.equal(getUri(), other.getUri()) &&
                    JodaBeanUtils.equal(getRoles(), other.getRoles()) &&
                    JodaBeanUtils.equal(getSecured(), other.getSecured());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getUri());
        hash = hash * 31 + JodaBeanUtils.hashCode(getRoles());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSecured());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("UriFilter{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("uri").append('=').append(JodaBeanUtils.toString(getUri())).append(',').append(' ');
        buf.append("roles").append('=').append(JodaBeanUtils.toString(getRoles())).append(',').append(' ');
        buf.append("secured").append('=').append(JodaBeanUtils.toString(getSecured())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code UriFilter}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code uri} property.
         */
        private final MetaProperty<String> uri = DirectMetaProperty.ofReadWrite(
                this, "uri", UriFilter.class, String.class);
        /**
         * The meta-property for the {@code roles} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> roles = DirectMetaProperty.ofReadWrite(
                this, "roles", UriFilter.class, (Class) List.class);
        /**
         * The meta-property for the {@code secured} property.
         */
        private final MetaProperty<Boolean> secured = DirectMetaProperty.ofReadWrite(
                this, "secured", UriFilter.class, Boolean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "uri",
                "roles",
                "secured");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 116076:  // uri
                    return uri;
                case 108695229:  // roles
                    return roles;
                case 1970279373:  // secured
                    return secured;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends UriFilter> builder() {
            return new DirectBeanBuilder<UriFilter>(new UriFilter());
        }

        @Override
        public Class<? extends UriFilter> beanType() {
            return UriFilter.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code uri} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> uri() {
            return uri;
        }

        /**
         * The meta-property for the {@code roles} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> roles() {
            return roles;
        }

        /**
         * The meta-property for the {@code secured} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> secured() {
            return secured;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 116076:  // uri
                    return ((UriFilter) bean).getUri();
                case 108695229:  // roles
                    return ((UriFilter) bean).getRoles();
                case 1970279373:  // secured
                    return ((UriFilter) bean).getSecured();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 116076:  // uri
                    ((UriFilter) bean).setUri((String) newValue);
                    return;
                case 108695229:  // roles
                    ((UriFilter) bean).setRoles((List<String>) newValue);
                    return;
                case 1970279373:  // secured
                    ((UriFilter) bean).setSecured((Boolean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
