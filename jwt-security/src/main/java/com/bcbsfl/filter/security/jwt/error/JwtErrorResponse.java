package com.bcbsfl.filter.security.jwt.error;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.bcbsfl.filter.security.jackson.JwtObjectMapper;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@BeanDefinition
public class JwtErrorResponse implements Bean, Serializable {

    @PropertyDefinition
    String message;
    
    @PropertyDefinition
    String code;
    
    @JsonIgnore
    public String getJSON(){

        ObjectMapper mapper = JwtObjectMapper.getObjectMapper();
        try {
            return mapper.writeValueAsString(this);
        } catch (JsonProcessingException e) {
            return "";
        }
    }
    
 

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code JwtErrorResponse}.
     * @return the meta-bean, not null
     */
    public static JwtErrorResponse.Meta meta() {
        return JwtErrorResponse.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(JwtErrorResponse.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    @Override
    public JwtErrorResponse.Meta metaBean() {
        return JwtErrorResponse.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the message.
     * @return the value of the property
     */
    public String getMessage() {
        return message;
    }

    /**
     * Sets the message.
     * @param message  the new value of the property
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Gets the the {@code message} property.
     * @return the property, not null
     */
    public final Property<String> message() {
        return metaBean().message().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the code.
     * @return the value of the property
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the code.
     * @param code  the new value of the property
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Gets the the {@code code} property.
     * @return the property, not null
     */
    public final Property<String> code() {
        return metaBean().code().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public JwtErrorResponse clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            JwtErrorResponse other = (JwtErrorResponse) obj;
            return JodaBeanUtils.equal(getMessage(), other.getMessage()) &&
                    JodaBeanUtils.equal(getCode(), other.getCode());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getMessage());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCode());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("JwtErrorResponse{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("message").append('=').append(JodaBeanUtils.toString(getMessage())).append(',').append(' ');
        buf.append("code").append('=').append(JodaBeanUtils.toString(getCode())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code JwtErrorResponse}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code message} property.
         */
        private final MetaProperty<String> message = DirectMetaProperty.ofReadWrite(
                this, "message", JwtErrorResponse.class, String.class);
        /**
         * The meta-property for the {@code code} property.
         */
        private final MetaProperty<String> code = DirectMetaProperty.ofReadWrite(
                this, "code", JwtErrorResponse.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "message",
                "code");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 954925063:  // message
                    return message;
                case 3059181:  // code
                    return code;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends JwtErrorResponse> builder() {
            return new DirectBeanBuilder<JwtErrorResponse>(new JwtErrorResponse());
        }

        @Override
        public Class<? extends JwtErrorResponse> beanType() {
            return JwtErrorResponse.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code message} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> message() {
            return message;
        }

        /**
         * The meta-property for the {@code code} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> code() {
            return code;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 954925063:  // message
                    return ((JwtErrorResponse) bean).getMessage();
                case 3059181:  // code
                    return ((JwtErrorResponse) bean).getCode();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 954925063:  // message
                    ((JwtErrorResponse) bean).setMessage((String) newValue);
                    return;
                case 3059181:  // code
                    ((JwtErrorResponse) bean).setCode((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
