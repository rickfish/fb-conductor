package com.bcbsfl.filter.security.config;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class FilterConfigs implements Bean, Serializable {
    
    @PropertyDefinition
    String env;

    @PropertyDefinition
    Boolean enabled;
    
    @PropertyDefinition
    String unAuthRedirect;
    
    @PropertyDefinition
    Boolean defaultSecured;
    
    @PropertyDefinition
    List<UriFilter> uris;
    
//    @PropertyDefinition
//    String smCertFile;
//    
//    @PropertyDefinition
//    String dpCertFile;
//    
//    @PropertyDefinition
//    Integer certReload;
    
    @PropertyDefinition
    Integer expirationClockSkew;
    
//    @PropertyDefinition
//    List<String> acceptedAudience;
    
    @PropertyDefinition
    String logLevel;
    
    @PropertyDefinition
    Boolean logSysOut;
    
    @PropertyDefinition
    String jwtCertificatesPath;
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code FilterConfigs}.
     * @return the meta-bean, not null
     */
    public static FilterConfigs.Meta meta() {
        return FilterConfigs.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(FilterConfigs.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    @Override
    public FilterConfigs.Meta metaBean() {
        return FilterConfigs.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the env.
     * @return the value of the property
     */
    public String getEnv() {
        return env;
    }

    /**
     * Sets the env.
     * @param env  the new value of the property
     */
    public void setEnv(String env) {
        this.env = env;
    }

    /**
     * Gets the the {@code env} property.
     * @return the property, not null
     */
    public final Property<String> env() {
        return metaBean().env().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the enabled.
     * @return the value of the property
     */
    public Boolean getEnabled() {
        return enabled;
    }

    /**
     * Sets the enabled.
     * @param enabled  the new value of the property
     */
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * Gets the the {@code enabled} property.
     * @return the property, not null
     */
    public final Property<Boolean> enabled() {
        return metaBean().enabled().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the unAuthRedirect.
     * @return the value of the property
     */
    public String getUnAuthRedirect() {
        return unAuthRedirect;
    }

    /**
     * Sets the unAuthRedirect.
     * @param unAuthRedirect  the new value of the property
     */
    public void setUnAuthRedirect(String unAuthRedirect) {
        this.unAuthRedirect = unAuthRedirect;
    }

    /**
     * Gets the the {@code unAuthRedirect} property.
     * @return the property, not null
     */
    public final Property<String> unAuthRedirect() {
        return metaBean().unAuthRedirect().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the defaultSecured.
     * @return the value of the property
     */
    public Boolean getDefaultSecured() {
        return defaultSecured;
    }

    /**
     * Sets the defaultSecured.
     * @param defaultSecured  the new value of the property
     */
    public void setDefaultSecured(Boolean defaultSecured) {
        this.defaultSecured = defaultSecured;
    }

    /**
     * Gets the the {@code defaultSecured} property.
     * @return the property, not null
     */
    public final Property<Boolean> defaultSecured() {
        return metaBean().defaultSecured().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the uris.
     * @return the value of the property
     */
    public List<UriFilter> getUris() {
        return uris;
    }

    /**
     * Sets the uris.
     * @param uris  the new value of the property
     */
    public void setUris(List<UriFilter> uris) {
        this.uris = uris;
    }

    /**
     * Gets the the {@code uris} property.
     * @return the property, not null
     */
    public final Property<List<UriFilter>> uris() {
        return metaBean().uris().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the expirationClockSkew.
     * @return the value of the property
     */
    public Integer getExpirationClockSkew() {
        return expirationClockSkew;
    }

    /**
     * Sets the expirationClockSkew.
     * @param expirationClockSkew  the new value of the property
     */
    public void setExpirationClockSkew(Integer expirationClockSkew) {
        this.expirationClockSkew = expirationClockSkew;
    }

    /**
     * Gets the the {@code expirationClockSkew} property.
     * @return the property, not null
     */
    public final Property<Integer> expirationClockSkew() {
        return metaBean().expirationClockSkew().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the logLevel.
     * @return the value of the property
     */
    public String getLogLevel() {
        return logLevel;
    }

    /**
     * Sets the logLevel.
     * @param logLevel  the new value of the property
     */
    public void setLogLevel(String logLevel) {
        this.logLevel = logLevel;
    }

    /**
     * Gets the the {@code logLevel} property.
     * @return the property, not null
     */
    public final Property<String> logLevel() {
        return metaBean().logLevel().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the logSysOut.
     * @return the value of the property
     */
    public Boolean getLogSysOut() {
        return logSysOut;
    }

    /**
     * Sets the logSysOut.
     * @param logSysOut  the new value of the property
     */
    public void setLogSysOut(Boolean logSysOut) {
        this.logSysOut = logSysOut;
    }

    /**
     * Gets the the {@code logSysOut} property.
     * @return the property, not null
     */
    public final Property<Boolean> logSysOut() {
        return metaBean().logSysOut().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the jwtCertificatesPath.
     * @return the value of the property
     */
    public String getJwtCertificatesPath() {
        return jwtCertificatesPath;
    }

    /**
     * Sets the jwtCertificatesPath.
     * @param jwtCertificatesPath  the new value of the property
     */
    public void setJwtCertificatesPath(String jwtCertificatesPath) {
        this.jwtCertificatesPath = jwtCertificatesPath;
    }

    /**
     * Gets the the {@code jwtCertificatesPath} property.
     * @return the property, not null
     */
    public final Property<String> jwtCertificatesPath() {
        return metaBean().jwtCertificatesPath().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public FilterConfigs clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            FilterConfigs other = (FilterConfigs) obj;
            return JodaBeanUtils.equal(getEnv(), other.getEnv()) &&
                    JodaBeanUtils.equal(getEnabled(), other.getEnabled()) &&
                    JodaBeanUtils.equal(getUnAuthRedirect(), other.getUnAuthRedirect()) &&
                    JodaBeanUtils.equal(getDefaultSecured(), other.getDefaultSecured()) &&
                    JodaBeanUtils.equal(getUris(), other.getUris()) &&
                    JodaBeanUtils.equal(getExpirationClockSkew(), other.getExpirationClockSkew()) &&
                    JodaBeanUtils.equal(getLogLevel(), other.getLogLevel()) &&
                    JodaBeanUtils.equal(getLogSysOut(), other.getLogSysOut()) &&
                    JodaBeanUtils.equal(getJwtCertificatesPath(), other.getJwtCertificatesPath());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getEnv());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEnabled());
        hash = hash * 31 + JodaBeanUtils.hashCode(getUnAuthRedirect());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDefaultSecured());
        hash = hash * 31 + JodaBeanUtils.hashCode(getUris());
        hash = hash * 31 + JodaBeanUtils.hashCode(getExpirationClockSkew());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLogLevel());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLogSysOut());
        hash = hash * 31 + JodaBeanUtils.hashCode(getJwtCertificatesPath());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(320);
        buf.append("FilterConfigs{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("env").append('=').append(JodaBeanUtils.toString(getEnv())).append(',').append(' ');
        buf.append("enabled").append('=').append(JodaBeanUtils.toString(getEnabled())).append(',').append(' ');
        buf.append("unAuthRedirect").append('=').append(JodaBeanUtils.toString(getUnAuthRedirect())).append(',').append(' ');
        buf.append("defaultSecured").append('=').append(JodaBeanUtils.toString(getDefaultSecured())).append(',').append(' ');
        buf.append("uris").append('=').append(JodaBeanUtils.toString(getUris())).append(',').append(' ');
        buf.append("expirationClockSkew").append('=').append(JodaBeanUtils.toString(getExpirationClockSkew())).append(',').append(' ');
        buf.append("logLevel").append('=').append(JodaBeanUtils.toString(getLogLevel())).append(',').append(' ');
        buf.append("logSysOut").append('=').append(JodaBeanUtils.toString(getLogSysOut())).append(',').append(' ');
        buf.append("jwtCertificatesPath").append('=').append(JodaBeanUtils.toString(getJwtCertificatesPath())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code FilterConfigs}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code env} property.
         */
        private final MetaProperty<String> env = DirectMetaProperty.ofReadWrite(
                this, "env", FilterConfigs.class, String.class);
        /**
         * The meta-property for the {@code enabled} property.
         */
        private final MetaProperty<Boolean> enabled = DirectMetaProperty.ofReadWrite(
                this, "enabled", FilterConfigs.class, Boolean.class);
        /**
         * The meta-property for the {@code unAuthRedirect} property.
         */
        private final MetaProperty<String> unAuthRedirect = DirectMetaProperty.ofReadWrite(
                this, "unAuthRedirect", FilterConfigs.class, String.class);
        /**
         * The meta-property for the {@code defaultSecured} property.
         */
        private final MetaProperty<Boolean> defaultSecured = DirectMetaProperty.ofReadWrite(
                this, "defaultSecured", FilterConfigs.class, Boolean.class);
        /**
         * The meta-property for the {@code uris} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<UriFilter>> uris = DirectMetaProperty.ofReadWrite(
                this, "uris", FilterConfigs.class, (Class) List.class);
        /**
         * The meta-property for the {@code expirationClockSkew} property.
         */
        private final MetaProperty<Integer> expirationClockSkew = DirectMetaProperty.ofReadWrite(
                this, "expirationClockSkew", FilterConfigs.class, Integer.class);
        /**
         * The meta-property for the {@code logLevel} property.
         */
        private final MetaProperty<String> logLevel = DirectMetaProperty.ofReadWrite(
                this, "logLevel", FilterConfigs.class, String.class);
        /**
         * The meta-property for the {@code logSysOut} property.
         */
        private final MetaProperty<Boolean> logSysOut = DirectMetaProperty.ofReadWrite(
                this, "logSysOut", FilterConfigs.class, Boolean.class);
        /**
         * The meta-property for the {@code jwtCertificatesPath} property.
         */
        private final MetaProperty<String> jwtCertificatesPath = DirectMetaProperty.ofReadWrite(
                this, "jwtCertificatesPath", FilterConfigs.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "env",
                "enabled",
                "unAuthRedirect",
                "defaultSecured",
                "uris",
                "expirationClockSkew",
                "logLevel",
                "logSysOut",
                "jwtCertificatesPath");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 100589:  // env
                    return env;
                case -1609594047:  // enabled
                    return enabled;
                case 2046187229:  // unAuthRedirect
                    return unAuthRedirect;
                case -320570804:  // defaultSecured
                    return defaultSecured;
                case 3598471:  // uris
                    return uris;
                case -1305941943:  // expirationClockSkew
                    return expirationClockSkew;
                case 1995731616:  // logLevel
                    return logLevel;
                case 1956902309:  // logSysOut
                    return logSysOut;
                case 1161887464:  // jwtCertificatesPath
                    return jwtCertificatesPath;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends FilterConfigs> builder() {
            return new DirectBeanBuilder<FilterConfigs>(new FilterConfigs());
        }

        @Override
        public Class<? extends FilterConfigs> beanType() {
            return FilterConfigs.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code env} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> env() {
            return env;
        }

        /**
         * The meta-property for the {@code enabled} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> enabled() {
            return enabled;
        }

        /**
         * The meta-property for the {@code unAuthRedirect} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> unAuthRedirect() {
            return unAuthRedirect;
        }

        /**
         * The meta-property for the {@code defaultSecured} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> defaultSecured() {
            return defaultSecured;
        }

        /**
         * The meta-property for the {@code uris} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<UriFilter>> uris() {
            return uris;
        }

        /**
         * The meta-property for the {@code expirationClockSkew} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> expirationClockSkew() {
            return expirationClockSkew;
        }

        /**
         * The meta-property for the {@code logLevel} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> logLevel() {
            return logLevel;
        }

        /**
         * The meta-property for the {@code logSysOut} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> logSysOut() {
            return logSysOut;
        }

        /**
         * The meta-property for the {@code jwtCertificatesPath} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> jwtCertificatesPath() {
            return jwtCertificatesPath;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 100589:  // env
                    return ((FilterConfigs) bean).getEnv();
                case -1609594047:  // enabled
                    return ((FilterConfigs) bean).getEnabled();
                case 2046187229:  // unAuthRedirect
                    return ((FilterConfigs) bean).getUnAuthRedirect();
                case -320570804:  // defaultSecured
                    return ((FilterConfigs) bean).getDefaultSecured();
                case 3598471:  // uris
                    return ((FilterConfigs) bean).getUris();
                case -1305941943:  // expirationClockSkew
                    return ((FilterConfigs) bean).getExpirationClockSkew();
                case 1995731616:  // logLevel
                    return ((FilterConfigs) bean).getLogLevel();
                case 1956902309:  // logSysOut
                    return ((FilterConfigs) bean).getLogSysOut();
                case 1161887464:  // jwtCertificatesPath
                    return ((FilterConfigs) bean).getJwtCertificatesPath();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 100589:  // env
                    ((FilterConfigs) bean).setEnv((String) newValue);
                    return;
                case -1609594047:  // enabled
                    ((FilterConfigs) bean).setEnabled((Boolean) newValue);
                    return;
                case 2046187229:  // unAuthRedirect
                    ((FilterConfigs) bean).setUnAuthRedirect((String) newValue);
                    return;
                case -320570804:  // defaultSecured
                    ((FilterConfigs) bean).setDefaultSecured((Boolean) newValue);
                    return;
                case 3598471:  // uris
                    ((FilterConfigs) bean).setUris((List<UriFilter>) newValue);
                    return;
                case -1305941943:  // expirationClockSkew
                    ((FilterConfigs) bean).setExpirationClockSkew((Integer) newValue);
                    return;
                case 1995731616:  // logLevel
                    ((FilterConfigs) bean).setLogLevel((String) newValue);
                    return;
                case 1956902309:  // logSysOut
                    ((FilterConfigs) bean).setLogSysOut((Boolean) newValue);
                    return;
                case 1161887464:  // jwtCertificatesPath
                    ((FilterConfigs) bean).setJwtCertificatesPath((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
