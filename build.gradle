buildscript {
    repositories {
		maven {
			url 'http://artifactory.bcbsfl.com/artifactory/libs-release'
		}
	
		maven {
			 url 'http://artifactory.bcbsfl.com/artifactory/maven-libs/'
		}

		maven {
			url 'http://artifactory.bcbsfl.com/artifactory/gradle-test-libs-release'
		}
	
		maven {
			url 'http://artifactory.bcbsfl.com/artifactory/plugins-gradle-org'
		}
    }

    dependencies {
		configurations.all {
			exclude group: 'amazon', module: 'aws-java-sdk'
			exclude group: 'com.thoughtworks.xstream', module: 'xstream'
			exclude group: 'io.netty', module: 'netty-resolver-dns'
			exclude group: 'com.squareup.okhttp', module: 'okhttp'
        	exclude group: 'com.google.protobuf', module: 'protobuf-java'			
        	resolutionStrategy {
		       	force 'net.java.dev.jna:jna:+'
				force 'commons-beanutils:commons-beanutils:+'
				force 'commons-collections:commons-collections:+'
				force 'io.netty:netty-common:4.1.48.Final'
				force 'io.netty:netty-transport:4.1.48.Final'
				force 'io.netty:netty-codec:4.1.48.Final'
				force 'io.netty:netty-codec-http:4.1.53.Final'
				force 'io.netty:netty-codec-http2:4.1.48.Final'
				force 'xerces:xercesImpl:2.12.0'
				force 'org.apache.httpcomponents:httpclient-cache:+'
				force 'net.java.dev.jna:jna-platform:+'
				force 'com.amazonaws:aws-java-sdk-sqs:+'
				force "org.apache.thrift:libthrift:+"
				force "net.minidev:json-smart:+"
				force "org.apache.logging.log4j:log4j-api:2.17.0"
    			force "org.apache.logging.log4j:log4j-core:2.17.0"
				force "xerces:xercesImpl:2.12.2"
				force "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"
                force "com.netflix.nebula:gradle-metrics-plugin:10.1.8"
	            force "org.mozilla:rhino:1.7.13"
    	        force "com.google.protobuf:protobuf-java:3.13.0"
           	}
		}                                                                                       
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:4.0.1'
        classpath 'org.apache.ant:ant:1.9.7'
    }
}

plugins {
    id 'nebula.netflixoss' version '5.1.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

apply plugin: 'project-report'
apply from: "$rootDir/versionsOfDependencies.gradle"

import org.jfrog.gradle.plugin.artifactory.task.ArtifactoryTask
allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'

    repositories {
	    maven {
			url 'http://artifactory.bcbsfl.com/artifactory/libs-release'
		}

		 maven {
			url 'http://artifactory.bcbsfl.com/artifactory/maven-libs/'
		 }

 	    maven {
			url 'http://artifactory.bcbsfl.com/artifactory/gradle-test-libs-release'
		}
	
		maven {
			url 'http://artifactory.bcbsfl.com/artifactory/plugins-gradle-org'
		}

 	    maven {
			url 'http://artifactory.bcbsfl.com/artifactory/bintray-netflix-dyno/'
		}
	}

    tasks.withType(ArtifactoryTask) {
        skip = true
    }
}

def javaProjects = subprojects.findAll {
    it.name != "ui"
}

configure(javaProjects) {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile "junit:junit:${revJUnit}"
        testCompile("org.mockito:mockito-core:${revMockito}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
    }

    group = "com.netflix.${githubProjectName}"

    tasks.withType(Test)  {
        maxParallelForks = 100
    }

    license {
		excludes(['**/*.txt', '**/*.conf', '**/*.properties', '**/*.json', '**/swagger-ui/*'])
	}

	task licenseFormatTests (type:nl.javadude.gradle.plugins.license.License) {
    	source = fileTree(dir: "src/test").include("**/*")
	}
	licenseFormat.dependsOn licenseFormatTests


    tasks.withType(Test) {
        task ->
            // set heap size for the test JVM(s)
            minHeapSize = "256m"
            maxHeapSize = "2g"

            jacocoTestReport.executionData += files("$buildDir/jacoco/${task.name}.exec")
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}



/**********************************
 * Coverage Tasks
 **********************************/
task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    dependsOn subprojects*.test

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories = files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it,
                            // Exclude es modules from code coverage reports
                            exclude: 'com/netflix/conductor/elasticsearch'
                    )
                }
        )
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
    group = "Coverage reports"
    description = "Uploads the aggregated coverage report to Coveralls"
    dependsOn codeCoverageReport
}

